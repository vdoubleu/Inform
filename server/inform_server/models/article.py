# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from inform_server.models.base_model_ import Model
from inform_server import util


class Article(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, author: str=None, _date: datetime=None, category: str=None, title: str=None, body: str=None):  # noqa: E501
        """Article - a model defined in Swagger

        :param id: The id of this Article.  # noqa: E501
        :type id: int
        :param author: The author of this Article.  # noqa: E501
        :type author: str
        :param _date: The _date of this Article.  # noqa: E501
        :type _date: datetime
        :param category: The category of this Article.  # noqa: E501
        :type category: str
        :param title: The title of this Article.  # noqa: E501
        :type title: str
        :param body: The body of this Article.  # noqa: E501
        :type body: str
        """
        self.swagger_types = {
            'id': int,
            'author': str,
            '_date': datetime,
            'category': str,
            'title': str,
            'body': str
        }

        self.attribute_map = {
            'id': 'id',
            'author': 'author',
            '_date': 'date',
            'category': 'category',
            'title': 'title',
            'body': 'body'
        }
        self._id = id
        self._author = author
        self.__date = _date
        self._category = category
        self._title = title
        self._body = body

    @classmethod
    def from_dict(cls, dikt) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Article of this Article.  # noqa: E501
        :rtype: Article
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Article.


        :return: The id of this Article.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Article.


        :param id: The id of this Article.
        :type id: int
        """

        self._id = id

    @property
    def author(self) -> str:
        """Gets the author of this Article.


        :return: The author of this Article.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Article.


        :param author: The author of this Article.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def _date(self) -> datetime:
        """Gets the _date of this Article.


        :return: The _date of this Article.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this Article.


        :param _date: The _date of this Article.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def category(self) -> str:
        """Gets the category of this Article.


        :return: The category of this Article.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Article.


        :param category: The category of this Article.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def title(self) -> str:
        """Gets the title of this Article.


        :return: The title of this Article.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Article.


        :param title: The title of this Article.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def body(self) -> str:
        """Gets the body of this Article.


        :return: The body of this Article.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this Article.


        :param body: The body of this Article.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body
